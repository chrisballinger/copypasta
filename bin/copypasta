#!/usr/bin/env ruby

require 'optparse'
require 'methadone'
require 'copypasta.rb'
require 'copypasta/parse.rb'

class App
  include Methadone::Main
  include Methadone::CLILogging
  include Methadone::SH

  main do |binary,output_dir|
    # your program code here
    # You can access CLI options via
    # the options Hash

    @parse = Parse.new

    info "creating directory: #{output_dir}"
    sh "mkdir #{output_dir}" unless options[:'dry-run']
    info "copying #{binary} to #{output_dir}"
    unless options[:'dry-run']
      binary_name = binary.scan(/(([a-z]*)(.[0-9]*.dylib)?)$/)[0][0]
      #    sh "cp #{binary} #{output_dir}" unless options[:'dr#y-run']
      FileUtils.copy_file("#{binary}", "#{output_dir}/#{binary_name}" )
      FileUtils.chmod "u=wrx", "#{output_dir}/#{binary_name}"
    end

    libraries = extract_dependencies(binary)

    libraries.each do |library|
      info "copying #{library[:dependency_path]} to #{output_dir}"
      unless options[:'dry-run']
        #sh "cp #{library[:dependency_path]} #{output_dir}" unless options[:'dry-run']
        FileUtils.copy_file("#{library[:dependency_path]}", "#{output_dir}/#{library[:dependency_name]}" )
        FileUtils.chmod "u=wrx", "#{output_dir}/#{library[:dependency_name]}"
      end
    end

    libraries.each do |library|
      info "relinking #{library[:binary_name]} to point to #{library[:dependency_name]}"
      unless options[:'dry-run']
          sh "install_name_tool -change #{library[:dependency_path]} @executable_path/#{library[:dependency_name]} #{output_dir}/#{library[:binary_name]}" do
          end
      end
      
    end
#    libraries.each do |library|
#      copy_library(library.path, output_dir)
#    end
  end

  def self.extract_dependencies(binary)

    working_libraries = []
    sh "otool -L #{binary}" do |stdout|
      found_libraries = @parse.extract_libraries(binary, stdout)
      working_libraries = found_libraries.map do | lib| lib.dup end

#      info "Working: #{working_libraries}"
      counter = 0
      until working_libraries.empty? do
        library = working_libraries.pop
        #info "Library: #{library[:dependency_name]}"

        sh "otool -L #{library[:dependency_path]}" do |stdout_library|
          new_libraries = @parse.extract_libraries(library[:dependency_path], stdout_library)
          found_libraries = found_libraries + new_libraries

        end

        counter += 1
      end


      #info "Found libraries: #{found_libraries}"
      #info "\nall libraries:\n#{found_libraries}\n"
      found_libraries = found_libraries.keep_if { |lib| lib[:dependency_name] != lib[:binary_name] }
      #info "\nall libraries:\n#{found_libraries}\n"
      #info "Found libraries: #{found_libraries}"
      return found_libraries
    end
  end



  def self.copy_library(library, target_dir)
    info "copying #{library} to #{target_dir}"
    sh "cp #{library} to #{target_dir}" unless options[:'dry-run']
  end



  # Declare command-line interface here

  # description "one line description of your app"
  #
  # Accept flags via:
  # on("--flag VAL","Some flag")
  # options[flag] will contain VAL
  #
  # Specify switches via:
  # on("--[no-]switch","Some switch")
  #
  # Or, just call OptionParser methods on opts
  #
  # Require an argument
  # arg :some_arg 
  #
  # # Make an argument optional
  # arg :optional_arg, :optional

  version Copypasta::VERSION

  description 'Copies and relinks binaries and their dependencies'

  arg :binary, "Binary to copy and relink"
  arg :output_dir, "Directory to copy the relinked binaries and dependencies into"

  on("--dry-run", "Performs a dry run without modifying any files")

  use_log_level_option

  go!
end
